# help_handler.py
import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.future import select

from config.bot_instance import bot
from database import get_db, save_question_to_db, get_question_by_id, get_questions_by_user, Question



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminResponse(StatesGroup):
    waiting_for_response = State()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 5389520473


# === –í—ã–∑–æ–≤ –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã help ===
@router.message(Command("help"))
async def help_command(message: Message):
    await help_message(message)


async def help_message(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –ø–æ–º–æ—â—å—é —Å–µ—Ç–æ—á–Ω—ã—Ö –±–æ—Ç–æ–≤.\n\n"
        "üí° –°–µ–π—á–∞—Å –≤–µ–¥–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ —Å–µ—Ç–æ—á–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏ –∏ —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ –±–∏—Ä–∂–µ.\n\n"
        "‚ùì –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –∏—Ö –º–Ω–µ! –Ø –ø–µ—Ä–µ–¥–∞–º –∏—Ö —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫—É—Ä—Å–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ.\n\n"
        "üîó –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ [—Å—Å—ã–ª–∫–µ](https://example.com/register). –≠—Ç–æ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞.\n\n"
        "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫—É—Ä—Å–∞."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer(text, reply_markup=keyboard)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" ===
@router.callback_query(F.data == "ask_question")
async def ask_question(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    await state.set_state(AdminResponse.waiting_for_response)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )
    await callback_query.answer()


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@router.message(AdminResponse.waiting_for_response, F.text != "–û—Ç–º–µ–Ω–∞")
async def handle_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    question_text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async for db in get_db():
        question = await save_question_to_db(db, user_id, question_text)

    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{question.id}")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üí¨ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {user_id}, Question ID: {question.id}):\n\n{question_text}",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫—É—Ä—Å–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[],
            resize_keyboard=True
        )
    )
    await state.clear()



# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /questions –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@router.message(Command("questions"), F.from_user.id == ADMIN_ID)
async def list_questions(message: Message):
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (answered = False)
        result = await db.execute(select(Question).filter(Question.answered == False))
        questions = result.scalars().all()

        if not questions:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
        response = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for question in questions:
            user_name = f"User_{question.user_id}"  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –¥–æ—Å—Ç–∞–≤ –∏–º—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã User
            response += f"üë§ {user_name} (ID: {question.user_id}, Question ID: {question.id}): {question.question[:50]}...\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=f"–û—Ç–≤–µ—Ç–∏—Ç—å {user_name}", callback_data=f"answer_{question.id}")
            ])

        await message.answer(response, reply_markup=keyboard)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" ===
@router.callback_query(F.data.startswith("answer_"))
async def handle_answer_button(callback: CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if admin_id != ADMIN_ID:
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º question_id –∏–∑ callback_data
    question_id = int(callback.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å
    async for db in get_db():
        result = await db.execute(select(Question).filter(Question.id == question_id))
        question = result.scalars().first()
        if not question:
            await callback.message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(question_id=question_id, user_id=question.user_id)
        await state.set_state(AdminResponse.waiting_for_response)

        # –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (ID: {question_id}):")
        await callback.answer()


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@router.message(AdminResponse.waiting_for_response, F.from_user.id == ADMIN_ID)
async def process_admin_response(message: Message, state: FSMContext):
    admin_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if admin_id != ADMIN_ID:
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!")
        return

    # –ü–æ–ª—É—á–∞–µ–º question_id –∏ user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    question_id = state_data.get("question_id")
    user_id = state_data.get("user_id")

    if not question_id or not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async for db in get_db():
        result = await db.execute(select(Question).filter(Question.id == question_id))
        question = result.scalars().first()
        if question:
            question.answer = message.text
            question.answered = True
            await db.commit()
            await db.refresh(question)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.clear()
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}).")
    await state.clear()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∞" ===
@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_question(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[],
            resize_keyboard=True
        )
    )

